set.seed(10)
## define paths
datapath <- "~/GitLab/incidence_for_sir/data_application/data/"
jagspath <- "~/GitLab/incidence_for_sir/data_application/code/"
## load ILI and surveillance data
dfili <- read.csv(paste0(datapath,"EW08-2020_nat.csv"))
dfili <- subset(dfili, region == "nat", select=c("epi_year","epi_week","wili","epi_time","epi_season"))
dfsurveillance <- read.csv(paste0(datapath,"EW08-2020_who_combined_prior_to_2015_16.csv"))
dfsurveillance <- subset(dfsurveillance, select=c("year","week","percent_positive"), region == "National")
## merge ILI data with surveillance data
df <- merge(dfili, dfsurveillance, by.x=c("epi_year","epi_week"), by.y=c("year","week"))
df$iliplus <- (df$wili/100)*(df$percent_positive/100)
## focus on 2010, national wILI (Fig 6 of Osthus et. al. AoAS)
df2010 <- subset(df, epi_season == 2010 & epi_time <= 35)
df2010 <- df2010[order(df2010$epi_time),]
###################################
## Prepare JAGS
## Equation 6.7
params_eq6.7 <- c(1.62, 7084.10)
## Equation 6.10
mean_eq6.10 <- c(0.0144, 17.9)
Sigma_eq6.10 <- matrix(c(0.000036, -0.0187, -0.0187, 16.09), nrow=2)
#
## define number of chains to run
nchains <- 1
nsamples <- 5000
##########################################################################
################### Incidence Stuff ######################################
#####################
# Murph notes: It's here that my methods will update things, I believe.
## First of all, we no longer need the rho grids.  We will instead use
## the grid of dave_beta, dave_gamma values.
# Compile Grid from the Darwin files.
inputgrid = NULL
for(file_name in list.files("grid_logs")){
data_name   = paste("grid_logs/", file_name, sep = "")
temp_rows   = read.csv(data_name)
temp_rows$X = NULL
inputgrid   = rbind(inputgrid, temp_rows)
}
#####################
# Murph: so dave used a look up table, and then linearly interpolates inside of JAGS.
# pretty cool.  I'm also using linear interpolation, but over three variables
# trilinear interpolation.
#########################################
## Fit Model in JAGS
## the observed time series
length_of_time_series <- 22
myy <- df2010[df2010$epi_time %in% 1:length_of_time_series,]$iliplus
## construct data to be passed into JAGS
jags_data <- list(y = myy,
tt = length(myy),
TT = 35,
params_eq6.7 = params_eq6.7,
mean_eq6.10 = mean_eq6.10,
Sigma_eq6.10 = Sigma_eq6.10,
dave_betas = inputgrid$dave_betas,
dave_gammas = inputgrid$dave_gamma)
## run JAGS
results_incidence <- run.jags(model = paste0(jagspath,"dbssm_jags_incidence.txt"),
data = jags_data,
monitor = c("ypred","theta","beta","gamma"),
# monitor = c("beta","gamma", "z1", "z2", "theta_i0"),
n.chains = nchains,
burnin = 12500,
sample = nsamples,
thin = 10)
## organize the posterior draws from JAGS
postdraws_incidence <- NULL
full_data = NULL
for(i in 1:nchains){
full_data = rbind(full_data, data.frame(chain = i, id = 1:nrow(data.frame(results_incidence$mcmc[[i]])),
data.frame(results_incidence$mcmc[[i]])))
temppostdraws_incidence <- reshape2::melt(data.frame(chain = i, id = 1:nrow(data.frame(results_incidence$mcmc[[i]])),
data.frame(results_incidence$mcmc[[i]])),id.vars = c("chain","id"))
postdraws_incidence <- rbind(postdraws_incidence, temppostdraws_incidence)
}
## organize output
postdraws_incidence$type <- data.table::tstrsplit(postdraws_incidence$variable,"\\.")[[1]]
postdraws_incidence$time <- as.numeric(data.table::tstrsplit(postdraws_incidence$variable,"\\.")[[2]])
postdraws_incidence$theta_type <- as.numeric(data.table::tstrsplit(postdraws_incidence$variable,"\\.")[[3]])
## just keep ypred and theta_type == 2
incidence_gammas = subset(postdraws_incidence, type == "gamma")
incidence_betas  = subset(postdraws_incidence, type == "beta")
postdraws_incidence <- subset(postdraws_incidence, (theta_type == 4 & time <= length_of_time_series + 1) | (type == "ypred" & time > length_of_time_series))
postdraws_incidence <- subset(postdraws_incidence, select=c("chain","id","type","time","value"))
## theta time is off shifted by 1
postdraws_incidence$theta_time <- postdraws_incidence$time - 1
postdraws_incidence$unqid      <- paste0(postdraws_incidence$chain,"_",postdraws_incidence$id)
## compute summaries
postdrawsply_incidence            <- ddply(postdraws_incidence,.(time, type),summarise,lower = quantile(value,probs=.025), avg = mean(value), upper = quantile(value,probs=.975))
postdrawsply_incidence$theta_time <- postdrawsply_incidence$time - 1
## plot a version of Fig 6
incidence_pred_plot = ggplot()+
geom_ribbon(aes(x=theta_time, ymin=lower, ymax=upper), data=subset(postdrawsply_incidence, type == "theta"),fill=I("darkgrey"))+
geom_ribbon(aes(x=time, ymin=lower, ymax=upper), data=subset(postdrawsply_incidence, type == "ypred"),fill=I("lightgrey"))+
geom_line(aes(x=theta_time, y=avg), data=subset(postdrawsply_incidence, type == "theta"))+
geom_line(aes(x=time, y=avg), data=subset(postdrawsply_incidence, type == "ypred"))+
geom_point(aes(x=1:35, y=df2010[df2010$epi_time %in% 1:35,]$iliplus), color=I("black"))+
ylab("Proportion Infectious")+
xlab("t") + ggtitle("DBSSM Model with Incidence Maps")+
ylim(c(0, 0.0175))+
theme(axis.text=element_text(size=15), axis.title = element_text(size = 15), plot.title = element_text(size = 15)) +
theme(axis.text.x = element_text(angle = 0, vjust = 0.5, hjust=1))
##########################################################################
##########################################################################
##########################################################################
################### Prevalence Stuff #####################################
## Make grid for g^-1(.) in equation 6.12
inputgrid <- expand.grid(S0 = 0.9,
I0 = seq(0,.05,length.out = 100),
PI = seq(0,.1,length.out = 100))
inputgrid <- subset(inputgrid, PI >= I0)
inputgrid <- subset(inputgrid, select=c("S0","I0","PI"))
## Equation 6.11
f_eq6.11 <- function(x,S0,I0,PI){
rhs = I0 + S0 - x*(log(S0) + 1 - log(x))
squared_error <- (PI - rhs)^2
return(squared_error)
}
## solve for rho (assuming rho < 1) for all scenarios
inputgrid$rho <- NA
for(i in 1:nrow(inputgrid)){
print(i)
rhofit <- optimize(f = f_eq6.11,
interval = c(0,1), # this assumes an epidemic (i.e., rho < 1), as is done in the paper between equations 6.11 and 6.12
S0 = inputgrid$S0[i],
I0 = inputgrid$I0[i],
PI = inputgrid$PI[i])
inputgrid$rho[i] <- rhofit$minimum
}
## JAGS can't do any kind of solving (like optimize() or uniroot()) within it, so we need a hack.
## JAGS has a linear interpolation function we can make use of
## Equation 6.11: PI = I0 - S0 - rho*(log(S0) + 1 - log(rho)), which implies
## PI - I0 - S0 = -rho*(log(S0) + 1 - log(rho))
## In Osthus 2017, he assumes S0 = .9, thus the RHS of the above equation is only a function of rho.
## Set rhostar = PI - I0 - S0
inputgrid$rhostar <- inputgrid$PI - inputgrid$I0 - inputgrid$S0
inputgridsmall <- ddply(inputgrid, .(rhostar, rho), summarise, n=1)
## make a grid of rhostar and rho
## this will be passed into JAGS to compute rho GIVEN PI, I0, and S0
rhostargrid <- seq(min(inputgridsmall$rhostar),
max(inputgridsmall$rhostar),
length.out = 200)
rhogrid <- approx(x=inputgridsmall$rhostar,
y=inputgridsmall$rho,
xout = rhostargrid)$y
## Equation 6.13
tauhat_eq6.13 <- c(-49.754,
-0.9577,
-0.0065,
-9.4896,
-0.3761,
-590.0001,
-2537.6102,
-4756.1828,
-3265.2458,
-102.2665,
-4.0162,
-430.9596,
-16.7104,
-798.3443,
-30.6638,
-543.8857,
-20.7459)
sigma2hat_eq6.13 <- 0.0421^2
#########################################
## Fit Model in JAGS
## the observed time series
length_of_time_series <- 22
myy <- df2010[df2010$epi_time %in% 1:length_of_time_series,]$iliplus
## construct data to be passed into JAGS
jags_data <- list(y = myy,
tt = length(myy),
TT = 35,
params_eq6.7 = params_eq6.7,
mean_eq6.10 = mean_eq6.10,
Sigma_eq6.10 = Sigma_eq6.10,
rhostargrid  = rhostargrid,
rhogrid = rhogrid,
tauhat_eq6.13 = tauhat_eq6.13,
sigma2hat_eq6.13 = sigma2hat_eq6.13)
## run JAGS
results_prevalence <- run.jags(model = paste0(jagspath,"dbssm_jags.txt"),
data = jags_data,
monitor = c("ypred","theta","beta","gamma"),
n.chains = nchains,
burnin = 12500,
sample = nsamples,
thin = 10)
## organize the posterior draws from JAGS
postdraws_prevalence <- NULL
for(i in 1:nchains){
temppostdraws_prevalence <- reshape2::melt(data.frame(chain = i, id = 1:nrow(data.frame(results_prevalence$mcmc[[i]])), data.frame(results_prevalence$mcmc[[i]])),id.vars = c("chain","id"))
postdraws_prevalence <- rbind(postdraws_prevalence, temppostdraws_prevalence)
}
## organize output
postdraws_prevalence$type <- data.table::tstrsplit(postdraws_prevalence$variable,"\\.")[[1]]
postdraws_prevalence$time <- as.numeric(data.table::tstrsplit(postdraws_prevalence$variable,"\\.")[[2]])
postdraws_prevalence$theta_type <- as.numeric(data.table::tstrsplit(postdraws_prevalence$variable,"\\.")[[3]])
prevalence_gammas = subset(postdraws_prevalence, type == "gamma")
prevalence_betas  = subset(postdraws_prevalence, type == "beta")
## just keep ypred and theta_type == 2
postdraws_prevalence <- subset(postdraws_prevalence, (theta_type == 2 & time <= length_of_time_series + 1) | (type == "ypred" & time > length_of_time_series))
postdraws_prevalence <- subset(postdraws_prevalence, select=c("chain","id","type","time","value"))
## theta time is off shifted by 1
postdraws_prevalence$theta_time <- postdraws_prevalence$time - 1
postdraws_prevalence$unqid <- paste0(postdraws_prevalence$chain,"_",postdraws_prevalence$id)
## compute summaries
postdrawsply_prevalence <- ddply(postdraws_prevalence,.(time, type),summarise,lower = quantile(value,probs=.025), avg = mean(value), upper = quantile(value,probs=.975))
postdrawsply_prevalence$theta_time <- postdrawsply_prevalence$time - 1
## plot a version of Fig 6
prevalence_pred_plot = ggplot()+
geom_ribbon(aes(x=theta_time, ymin=lower, ymax=upper), data=subset(postdrawsply_prevalence, type == "theta"),fill=I("darkgrey"))+
geom_ribbon(aes(x=time, ymin=lower, ymax=upper), data=subset(postdrawsply_prevalence, type == "ypred"),fill=I("lightgrey"))+
geom_line(aes(x=theta_time, y=avg), data=subset(postdrawsply_prevalence, type == "theta"))+
geom_line(aes(x=time, y=avg), data=subset(postdrawsply_prevalence, type == "ypred"))+
geom_point(aes(x=1:35, y=df2010[df2010$epi_time %in% 1:35,]$iliplus), color=I("black"))+
ylab("Proportion Infectious") +
xlab("t") + ggtitle("DBSSM Model with Prevalence Maps") +
ylim(c(0, 0.0175))+
theme(axis.text=element_text(size=15), axis.title = element_text(size = 15), plot.title = element_text(size = 15)) +
theme(axis.text.x = element_text(angle = 0, vjust = 0.5, hjust=1))
##########################################################################
##########################################################################å
both_plots = list(prevalence_pred_plot, incidence_pred_plot)
grid.arrange(both_plots[[1]], both_plots[[2]],
layout_matrix = matrix(c(1,2), byrow = TRUE, ncol = 1))
# Let's compare the dave_beta, dave_gamma values drawn via each method.
rho_data                = data.frame(variable = rep('rho', times = nrow(incidence_betas)),
value = incidence_betas[c(4)]/incidence_gammas[c(4)])
incidence_data          = rbind(incidence_gammas[c(3,4)],incidence_betas[c(3,4)],rho_data)
incidence_data$approach = rep('incidence', times = nrow(incidence_data))
rho_data                 = data.frame(variable = rep('rho', times = nrow(prevalence_betas)),
value = prevalence_betas[c(4)]/prevalence_gammas[c(4)])
prevalence_data          = rbind(prevalence_gammas[c(3,4)],prevalence_betas[c(3,4)], rho_data)
prevalence_data$approach = rep('prevalence', times = nrow(prevalence_data))
graph_data = rbind(incidence_data, prevalence_data)
graph_data$variable = as.factor(graph_data$variable)
ggplot(graph_data, aes(x = variable, y = value, fill = approach)) +
geom_boxplot() + scale_fill_manual(values=c("#999999", "#FFFFFF")) +
scale_x_discrete(labels = TeX(c('beta' = r"($\beta$)",
'gamma' = r"($\gamma$)",
'rho' = r"($\rho$)")) )+
theme(axis.text=element_text(size=15), axis.title = element_text(size = 15),
plot.title = element_text(size = 15)) +
theme(axis.text.x = element_text(angle = 0, vjust = 0.5, hjust=1))
# Comparing erroneous use of incidence data to proper use using new methods
## Author: Alexander C. Murph
## Date: March 2024
## Dave Osthus
## 1-18-24
## Recreating figs and code from Osthus et. al. 2010 AoAS paper
## "Forecasting Seasonal Influenza With A State-Space SIR Model"
## load libraries
setwd("~/GitLab/incidence_for_sir/data_application/code")
library(rjags)
library(runjags)
library(ggplot2)
library(reshape2)
library(data.table)
library(plyr)
library(gridExtra)
library(latex2exp)
theme_set(theme_bw())
set.seed(10)
## define paths
datapath <- "~/GitLab/incidence_for_sir/data_application/data/"
jagspath <- "~/GitLab/incidence_for_sir/data_application/code/"
## load ILI and surveillance data
dfili <- read.csv(paste0(datapath,"EW08-2020_nat.csv"))
dfili <- subset(dfili, region == "nat", select=c("epi_year","epi_week","wili","epi_time","epi_season"))
dfsurveillance <- read.csv(paste0(datapath,"EW08-2020_who_combined_prior_to_2015_16.csv"))
dfsurveillance <- subset(dfsurveillance, select=c("year","week","percent_positive"), region == "National")
## merge ILI data with surveillance data
df <- merge(dfili, dfsurveillance, by.x=c("epi_year","epi_week"), by.y=c("year","week"))
df$iliplus <- (df$wili/100)*(df$percent_positive/100)
## focus on 2010, national wILI (Fig 6 of Osthus et. al. AoAS)
df2010 <- subset(df, epi_season == 2010 & epi_time <= 35)
df2010 <- df2010[order(df2010$epi_time),]
###################################
## Prepare JAGS
## Equation 6.7
params_eq6.7 <- c(1.62, 7084.10)
## Equation 6.10
mean_eq6.10 <- c(0.0144, 17.9)
Sigma_eq6.10 <- matrix(c(0.000036, -0.0187, -0.0187, 16.09), nrow=2)
#
## define number of chains to run
nchains <- 1
nsamples <- 5000
##########################################################################
################### Incidence Stuff ######################################
#####################
# Murph notes: It's here that my methods will update things, I believe.
## First of all, we no longer need the rho grids.  We will instead use
## the grid of dave_beta, dave_gamma values.
# Compile Grid from the Darwin files.
inputgrid = NULL
for(file_name in list.files("grid_logs")){
data_name   = paste("grid_logs/", file_name, sep = "")
temp_rows   = read.csv(data_name)
temp_rows$X = NULL
inputgrid   = rbind(inputgrid, temp_rows)
}
#####################
# Murph: so dave used a look up table, and then linearly interpolates inside of JAGS.
# pretty cool.  I'm also using linear interpolation, but over three variables
# trilinear interpolation.
#########################################
## Fit Model in JAGS
## the observed time series
length_of_time_series <- 22
myy <- df2010[df2010$epi_time %in% 1:length_of_time_series,]$iliplus
## construct data to be passed into JAGS
jags_data <- list(y = myy,
tt = length(myy),
TT = 35,
params_eq6.7 = params_eq6.7,
mean_eq6.10 = mean_eq6.10,
Sigma_eq6.10 = Sigma_eq6.10,
dave_betas = inputgrid$dave_betas,
dave_gammas = inputgrid$dave_gamma)
## run JAGS
results_incidence <- run.jags(model = paste0(jagspath,"dbssm_jags_incidence.txt"),
data = jags_data,
monitor = c("ypred","theta","beta","gamma"),
# monitor = c("beta","gamma", "z1", "z2", "theta_i0"),
n.chains = nchains,
burnin = 12500,
sample = nsamples,
thin = 10)
## organize the posterior draws from JAGS
postdraws_incidence <- NULL
full_data = NULL
for(i in 1:nchains){
full_data = rbind(full_data, data.frame(chain = i, id = 1:nrow(data.frame(results_incidence$mcmc[[i]])),
data.frame(results_incidence$mcmc[[i]])))
temppostdraws_incidence <- reshape2::melt(data.frame(chain = i, id = 1:nrow(data.frame(results_incidence$mcmc[[i]])),
data.frame(results_incidence$mcmc[[i]])),id.vars = c("chain","id"))
postdraws_incidence <- rbind(postdraws_incidence, temppostdraws_incidence)
}
## organize output
postdraws_incidence$type <- data.table::tstrsplit(postdraws_incidence$variable,"\\.")[[1]]
postdraws_incidence$time <- as.numeric(data.table::tstrsplit(postdraws_incidence$variable,"\\.")[[2]])
postdraws_incidence$theta_type <- as.numeric(data.table::tstrsplit(postdraws_incidence$variable,"\\.")[[3]])
## just keep ypred and theta_type == 2
incidence_gammas = subset(postdraws_incidence, type == "gamma")
incidence_betas  = subset(postdraws_incidence, type == "beta")
postdraws_incidence <- subset(postdraws_incidence, (theta_type == 4 & time <= length_of_time_series + 1) | (type == "ypred" & time > length_of_time_series))
postdraws_incidence <- subset(postdraws_incidence, select=c("chain","id","type","time","value"))
## theta time is off shifted by 1
postdraws_incidence$theta_time <- postdraws_incidence$time - 1
postdraws_incidence$unqid      <- paste0(postdraws_incidence$chain,"_",postdraws_incidence$id)
## compute summaries
postdrawsply_incidence            <- ddply(postdraws_incidence,.(time, type),summarise,lower = quantile(value,probs=.025), avg = mean(value), upper = quantile(value,probs=.975))
postdrawsply_incidence$theta_time <- postdrawsply_incidence$time - 1
## plot a version of Fig 6
incidence_pred_plot = ggplot()+
geom_ribbon(aes(x=theta_time, ymin=lower, ymax=upper), data=subset(postdrawsply_incidence, type == "theta"),fill=I("darkgrey"))+
geom_ribbon(aes(x=time, ymin=lower, ymax=upper), data=subset(postdrawsply_incidence, type == "ypred"),fill=I("lightgrey"))+
geom_line(aes(x=theta_time, y=avg), data=subset(postdrawsply_incidence, type == "theta"))+
geom_line(aes(x=time, y=avg), data=subset(postdrawsply_incidence, type == "ypred"))+
geom_point(aes(x=1:35, y=df2010[df2010$epi_time %in% 1:35,]$iliplus), color=I("black"))+
ylab("Proportion Infectious")+
xlab("t") + ggtitle("DBSSM Model with Incidence Maps")+
ylim(c(0, 0.0175))+
theme(axis.text=element_text(size=15), axis.title = element_text(size = 15), plot.title = element_text(size = 15)) +
theme(axis.text.x = element_text(angle = 0, vjust = 0.5, hjust=1))
##########################################################################
##########################################################################
##########################################################################
################### Prevalence Stuff #####################################
## Make grid for g^-1(.) in equation 6.12
inputgrid <- expand.grid(S0 = 0.9,
I0 = seq(0,.05,length.out = 100),
PI = seq(0,.1,length.out = 100))
inputgrid <- subset(inputgrid, PI >= I0)
inputgrid <- subset(inputgrid, select=c("S0","I0","PI"))
## Equation 6.11
f_eq6.11 <- function(x,S0,I0,PI){
rhs = I0 + S0 - x*(log(S0) + 1 - log(x))
squared_error <- (PI - rhs)^2
return(squared_error)
}
## solve for rho (assuming rho < 1) for all scenarios
inputgrid$rho <- NA
for(i in 1:nrow(inputgrid)){
print(i)
rhofit <- optimize(f = f_eq6.11,
interval = c(0,1), # this assumes an epidemic (i.e., rho < 1), as is done in the paper between equations 6.11 and 6.12
S0 = inputgrid$S0[i],
I0 = inputgrid$I0[i],
PI = inputgrid$PI[i])
inputgrid$rho[i] <- rhofit$minimum
}
## JAGS can't do any kind of solving (like optimize() or uniroot()) within it, so we need a hack.
## JAGS has a linear interpolation function we can make use of
## Equation 6.11: PI = I0 - S0 - rho*(log(S0) + 1 - log(rho)), which implies
## PI - I0 - S0 = -rho*(log(S0) + 1 - log(rho))
## In Osthus 2017, he assumes S0 = .9, thus the RHS of the above equation is only a function of rho.
## Set rhostar = PI - I0 - S0
inputgrid$rhostar <- inputgrid$PI - inputgrid$I0 - inputgrid$S0
inputgridsmall <- ddply(inputgrid, .(rhostar, rho), summarise, n=1)
## make a grid of rhostar and rho
## this will be passed into JAGS to compute rho GIVEN PI, I0, and S0
rhostargrid <- seq(min(inputgridsmall$rhostar),
max(inputgridsmall$rhostar),
length.out = 200)
rhogrid <- approx(x=inputgridsmall$rhostar,
y=inputgridsmall$rho,
xout = rhostargrid)$y
## Equation 6.13
tauhat_eq6.13 <- c(-49.754,
-0.9577,
-0.0065,
-9.4896,
-0.3761,
-590.0001,
-2537.6102,
-4756.1828,
-3265.2458,
-102.2665,
-4.0162,
-430.9596,
-16.7104,
-798.3443,
-30.6638,
-543.8857,
-20.7459)
sigma2hat_eq6.13 <- 0.0421^2
#########################################
## Fit Model in JAGS
## the observed time series
length_of_time_series <- 22
myy <- df2010[df2010$epi_time %in% 1:length_of_time_series,]$iliplus
## construct data to be passed into JAGS
jags_data <- list(y = myy,
tt = length(myy),
TT = 35,
params_eq6.7 = params_eq6.7,
mean_eq6.10 = mean_eq6.10,
Sigma_eq6.10 = Sigma_eq6.10,
rhostargrid  = rhostargrid,
rhogrid = rhogrid,
tauhat_eq6.13 = tauhat_eq6.13,
sigma2hat_eq6.13 = sigma2hat_eq6.13)
## run JAGS
results_prevalence <- run.jags(model = paste0(jagspath,"dbssm_jags.txt"),
data = jags_data,
monitor = c("ypred","theta","beta","gamma"),
n.chains = nchains,
burnin = 12500,
sample = nsamples,
thin = 10)
## organize the posterior draws from JAGS
postdraws_prevalence <- NULL
for(i in 1:nchains){
temppostdraws_prevalence <- reshape2::melt(data.frame(chain = i, id = 1:nrow(data.frame(results_prevalence$mcmc[[i]])), data.frame(results_prevalence$mcmc[[i]])),id.vars = c("chain","id"))
postdraws_prevalence <- rbind(postdraws_prevalence, temppostdraws_prevalence)
}
## organize output
postdraws_prevalence$type <- data.table::tstrsplit(postdraws_prevalence$variable,"\\.")[[1]]
postdraws_prevalence$time <- as.numeric(data.table::tstrsplit(postdraws_prevalence$variable,"\\.")[[2]])
postdraws_prevalence$theta_type <- as.numeric(data.table::tstrsplit(postdraws_prevalence$variable,"\\.")[[3]])
prevalence_gammas = subset(postdraws_prevalence, type == "gamma")
prevalence_betas  = subset(postdraws_prevalence, type == "beta")
## just keep ypred and theta_type == 2
postdraws_prevalence <- subset(postdraws_prevalence, (theta_type == 2 & time <= length_of_time_series + 1) | (type == "ypred" & time > length_of_time_series))
postdraws_prevalence <- subset(postdraws_prevalence, select=c("chain","id","type","time","value"))
## theta time is off shifted by 1
postdraws_prevalence$theta_time <- postdraws_prevalence$time - 1
postdraws_prevalence$unqid <- paste0(postdraws_prevalence$chain,"_",postdraws_prevalence$id)
## compute summaries
postdrawsply_prevalence <- ddply(postdraws_prevalence,.(time, type),summarise,lower = quantile(value,probs=.025), avg = mean(value), upper = quantile(value,probs=.975))
postdrawsply_prevalence$theta_time <- postdrawsply_prevalence$time - 1
## plot a version of Fig 6
prevalence_pred_plot = ggplot()+
geom_ribbon(aes(x=theta_time, ymin=lower, ymax=upper), data=subset(postdrawsply_prevalence, type == "theta"),fill=I("darkgrey"))+
geom_ribbon(aes(x=time, ymin=lower, ymax=upper), data=subset(postdrawsply_prevalence, type == "ypred"),fill=I("lightgrey"))+
geom_line(aes(x=theta_time, y=avg), data=subset(postdrawsply_prevalence, type == "theta"))+
geom_line(aes(x=time, y=avg), data=subset(postdrawsply_prevalence, type == "ypred"))+
geom_point(aes(x=1:35, y=df2010[df2010$epi_time %in% 1:35,]$iliplus), color=I("black"))+
ylab("Proportion Infectious") +
xlab("t") + ggtitle("DBSSM Model with Prevalence Maps") +
ylim(c(0, 0.0175))+
theme(axis.text=element_text(size=15), axis.title = element_text(size = 15), plot.title = element_text(size = 15)) +
theme(axis.text.x = element_text(angle = 0, vjust = 0.5, hjust=1))
##########################################################################
##########################################################################å
both_plots = list(prevalence_pred_plot, incidence_pred_plot)
grid.arrange(both_plots[[1]], both_plots[[2]],
layout_matrix = matrix(c(1,2), byrow = TRUE, ncol = 1))
# Let's compare the dave_beta, dave_gamma values drawn via each method.
rho_data                = data.frame(variable = rep('rho', times = nrow(incidence_betas)),
value = incidence_betas[c(4)]/incidence_gammas[c(4)])
incidence_data          = rbind(incidence_gammas[c(3,4)],incidence_betas[c(3,4)],rho_data)
incidence_data$approach = rep('incidence', times = nrow(incidence_data))
rho_data                 = data.frame(variable = rep('rho', times = nrow(prevalence_betas)),
value = prevalence_betas[c(4)]/prevalence_gammas[c(4)])
prevalence_data          = rbind(prevalence_gammas[c(3,4)],prevalence_betas[c(3,4)], rho_data)
prevalence_data$approach = rep('prevalence', times = nrow(prevalence_data))
graph_data = rbind(incidence_data, prevalence_data)
graph_data$variable = as.factor(graph_data$variable)
ggplot(graph_data, aes(x = variable, y = value, fill = approach)) +
geom_boxplot() + scale_fill_manual(values=c("#999999", "#FFFFFF")) +
scale_x_discrete(labels = TeX(c('beta' = r"($\beta$)",
'gamma' = r"($\gamma$)",
'rho' = r"($\rho$)")) )+
theme(axis.text=element_text(size=15), axis.title = element_text(size = 15),
plot.title = element_text(size = 15)) +
theme(axis.text.x = element_text(angle = 0, vjust = 0.5, hjust=1))
