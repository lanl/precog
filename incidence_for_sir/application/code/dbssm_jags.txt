model{
  # Data model: Eq. (4.1a)
  for(i in 1:tt){
    y[i] ~ dbeta(lambda*max(1e-10,theta[i+1,2]), lambda*(1-max(1e-10,theta[i+1,2])))
  }
  
  # Posterior predictive model: Eq. (5.2)
  for(i in 1:TT){
    ypred[i] ~ dbeta(lambda*max(1e-10,theta[i+1,2]),lambda*(1-max(1e-10,theta[i+1,2])))
  }
  
  # State evolution model: Eq. (4.1b)
  theta[1,1:3] <- c(theta_s0, theta_i0, theta_r0)
  ftheta[1,1:3] <- c(0,0,0)
  for(i in 2:(TT+1)){
    # Eq. (4.1b)
    theta[i,1:3] ~ ddirch(kappa*ftheta[i,1:3])
    
    # Section 1 of Supplement: Eq (1.1)
    ftheta[i,1] <- max(0, theta[i-1,1] + (1/6)*(ks1[i-1] + 2*ks2[i-1] + 2*ks3[i-1] + ks4[i-1]))
    ftheta[i,2] <- max(0, theta[i-1,2] + (1/6)*(ki1[i-1] + 2*ki2[i-1] + 2*ki3[i-1] + ki4[i-1]))
    ftheta[i,3] <- max(0, theta[i-1,3] + (1/6)*(kr1[i-1] + 2*kr2[i-1] + 2*kr3[i-1] + kr4[i-1]))
    
    # Section 1 of Supplement: Eq (1.2a, 1.2b, and 1.2c)
    ks1[i-1] <- -beta*theta[i-1,1]*theta[i-1,2]
    ki1[i-1] <- beta*theta[i-1,1]*theta[i-1,2] - gamma*theta[i-1,2]
    kr1[i-1] <- gamma*theta[i-1,2]
    
    ks2[i-1] <- -beta*(theta[i-1,1] + .5*ks1[i-1])*(theta[i-1,2] + .5*ki1[i-1])
    ki2[i-1] <- beta*(theta[i-1,1] + .5*ks1[i-1])*(theta[i-1,2] + .5*ki1[i-1]) - gamma*(theta[i-1,2] + .5*ki1[i-1])
    kr2[i-1] <- gamma*(theta[i-1,2] + .5*ki1[i-1])
    
    ks3[i-1] <- -beta*(theta[i-1,1] + .5*ks2[i-1])*(theta[i-1,2] + .5*ki2[i-1])
    ki3[i-1] <- beta*(theta[i-1,1] + .5*ks2[i-1])*(theta[i-1,2] + .5*ki2[i-1]) - gamma*(theta[i-1,2] + .5*ki2[i-1])
    kr3[i-1] <- gamma*(theta[i-1,2] + .5*ki2[i-1])
    
    ks4[i-1] <- -beta*(theta[i-1,1] + ks3[i-1])*(theta[i-1,2] + ki3[i-1])
    ki4[i-1] <- beta*(theta[i-1,1] + ks3[i-1])*(theta[i-1,2] + ki3[i-1]) - gamma*(theta[i-1,2] + ki3[i-1])
    kr4[i-1] <- gamma*(theta[i-1,2] + ki3[i-1])
  }
  
  ## priors
  kappa ~ dgamma(2,.0001) # Eq (6.4)
  lambda ~ dgamma(2, .0001) # Eq. (6.5)

  theta_s0 <- .9 # Eq (6.6)
  theta_i0 ~ dbeta(params_eq6.7[1], params_eq6.7[2])T(0,.1) # Eq (6.7)
  theta_r0 <- 1 - theta_s0 - theta_i0 # Eq. (6.8)
  
  # Eq (6.10)
  z <- c(z1, z2)
  z1 ~ dnorm(mean_eq6.10[1], pow(Sigma_eq6.10[1,1],-1))T(theta_i0, 1)
  z2 ~ dnorm(z2givenz1_mean, pow(z2givenz1_var,-1))T(1,35)
  z2givenz1_mean <- mean_eq6.10[2] + (Sigma_eq6.10[1,2]/Sigma_eq6.10[1,1])*(z1 - mean_eq6.10[1])
  z2givenz1_var <- Sigma_eq6.10[2,2] - (Sigma_eq6.10[1,2])*(1/Sigma_eq6.10[1,1])*(Sigma_eq6.10[1,2])
  
  #############################################################
  ##  THIS IS SOMEHOW A PROBLEM
  # Eq. (6.11) to get rho
  rhostar <- z1 - theta_i0 - theta_s0
  rho <- interp.lin(rhostar, rhostargrid, rhogrid)
  
  ############################################################
  
  # Eq. (6.13)
  rowX <- c(1, log(z2), log(z2)^2, log(theta_i0), log(theta_i0)^2, log(rho), log(rho)^2, log(rho)^3, log(rho)^4, log(theta_i0)*log(rho), log(theta_i0)^2*log(rho), log(theta_i0)*log(rho)^2, log(theta_i0)^2*log(rho)^2, log(theta_i0)*log(rho)^3, log(theta_i0)^2*log(rho)^3, log(theta_i0)*log(rho)^4, log(theta_i0)^2*log(rho)^4)
  
  beta <- max(0,exp(inprod(rowX,tauhat_eq6.13) + 0.5*sigma2hat_eq6.13))
  gamma <- rho*beta

}





